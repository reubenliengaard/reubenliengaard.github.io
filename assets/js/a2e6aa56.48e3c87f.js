"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[6797],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?n.createElement(f,p(p({ref:r},c),{},{components:t})):n.createElement(f,p({ref:r},c))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,p=new Array(i);p[0]=m;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[u]="string"==typeof e?e:o,p[1]=a;for(var l=2;l<i;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9035:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const i={sidebar_position:3},p="Thermocouple",a={unversionedId:"rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python/thermocouple",id:"rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python/thermocouple",title:"Thermocouple",description:"Hardware",source:"@site/docs/rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python/thermocouple.md",sourceDirName:"rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python",slug:"/rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python/thermocouple",permalink:"/docs/rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python/thermocouple",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Carbon Dioxide",permalink:"/docs/rpi4-sensors-into-influxdb-pod-with-python/reading-rpi4-sensors-with-python/carbon-dioxide"},next:{title:"Linux",permalink:"/docs/category/linux"}},s={},l=[{value:"Hardware",id:"hardware",level:3},{value:"Script",id:"script",level:3},{value:"References",id:"references",level:2}],c={toc:l};function u(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"thermocouple"},"Thermocouple"),(0,o.kt)("h3",{id:"hardware"},"Hardware"),(0,o.kt)("h3",{id:"script"},"Script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_max31855\nfrom influxdb import InfluxDBClient\n\ndbClient = InfluxDBClient(\'192.168.88.48\', 8086, \'root\', \'root\', \'workshop\')\n\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\n\nmax31855 = adafruit_max31855.MAX31855(spi, cs)\n\nwhile True:\n    try:\n        tempC = max31855.temperature\n        tempF = tempC * 9 / 5 + 32\n        print("Temperature: {} C {} F ".format(tempC, tempF))\n        loginEvents = [{"measurement":"kiln",\n                    "fields": {\n                            "temp": tempC\n                            }\n                  }\n             ]\n        dbClient.write_points(loginEvents)\n        time.sleep(2.0)\n    except:\n        pass\n')),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.adafruit.com/product/269"},"Adafruit")))}u.isMDXComponent=!0}}]);