"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/reubenliengaard/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"this is where i document short stories of my spatial adventures.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.075,"hasTruncateMarker":false,"authors":[{"name":"Reuben Liengaard","title":"Maintainer","url":"https://github.com/reubenliengaard","imageURL":"https://github.com/reubenliengaard.png","key":"reubenliengaard"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["reubenliengaard"],"tags":["facebook","hello","docusaurus"]},"nextItem":{"title":"Average Price Paid Parish","permalink":"/blog/average-price-paid-parish"}},"content":"this is where i document short stories of my spatial adventures.\\n\\nchange \\n\\nalso\\n- this"},{"id":"average-price-paid-parish","metadata":{"permalink":"/blog/average-price-paid-parish","editUrl":"https://github.com/reubenliengaard/blog/2019-05-29-average-price-paid-parish.md","source":"@site/blog/2019-05-29-average-price-paid-parish.md","title":"Average Price Paid Parish","description":"Connect to server","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"spatial","permalink":"/blog/tags/spatial"},{"label":"gis","permalink":"/blog/tags/gis"}],"readingTime":1.045,"hasTruncateMarker":false,"authors":[{"name":"reubenliengaard","title":"Maintainer","url":"https://github.com/reubenliengaard","image_url":"https://github.com/reubenliengaard.png","imageURL":"https://github.com/reubenliengaard.png"}],"frontMatter":{"slug":"average-price-paid-parish","title":"Average Price Paid Parish","authors":{"name":"reubenliengaard","title":"Maintainer","url":"https://github.com/reubenliengaard","image_url":"https://github.com/reubenliengaard.png","imageURL":"https://github.com/reubenliengaard.png"},"tags":["spatial","gis"]},"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Price Paid Polygons","permalink":"/blog/price-paid-polygons"}},"content":"## Connect to server\\n\\nStarting a psql instance on the client in order to interact with the database on the server.\\n\\n```\\npsql -h 192.168.88.10 -U postgres gis\\n```\\n# Create priced paid polygons for every point\\n\\nUsing the point data already present in the database from the previous project to create a duplicate\\npolygon from the parish geometry table for every point each polygon contains, and appending the point\\nprice paid to it.\\n\\n### SELECT\\n\\n```\\nparish.geom,\\npoints.pounds\\nINTO pp_parish\\nFROM\\nparish INNER JOIN points\\nON st_contains(parish.geom, points.geom);\\n```\\n## Find avarage point value for duplicate polygons\\n\\nAs in the previous project, avaraging the values of the duplicate polygons back one.\\n\\n```\\nSELECT geom,avg(pounds)\\nINTO avg_pp_parish\\nFROM pp_parish\\nGROUP BY geom;\\n```\\n## Import new price paid polygons to file\\n\\n```\\nQgis > Database > DB Manager > Import Layer/File - Name: pp_parish\\n```\\n## Add price paid polygons layer to Qgis\\n\\n```\\nQgis > Layer > Add Layer > Add Vector Layer\\nQgis > Database > DB Manager > Import Layer/File - Name: pp_parish\\nVector Dataset(s): .shp\\n```\\n\\n## Colour polygons by attribute field\\n\\n```\\nRight click: Layer > Properties\\nSymbology > Single Symbol: Gradiated\\nVaule: pounds\\nColour Ramp: Spectral\\nInvert Colour Ramp\\nSegmentation: Equal Interval\\n```"},{"id":"price-paid-polygons","metadata":{"permalink":"/blog/price-paid-polygons","editUrl":"https://github.com/reubenliengaard/blog/2019-05-28-price-paid-polygons.md","source":"@site/blog/2019-05-28-price-paid-polygons.md","title":"Price Paid Polygons","description":"Connect to server","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"spatial","permalink":"/blog/tags/spatial"},{"label":"gis","permalink":"/blog/tags/gis"}],"readingTime":2.55,"hasTruncateMarker":false,"authors":[{"name":"reubenliengaard","title":"Maintainer","url":"https://github.com/reubenliengaard","image_url":"https://github.com/reubenliengaard.png","imageURL":"https://github.com/reubenliengaard.png"}],"frontMatter":{"slug":"price-paid-polygons","title":"Price Paid Polygons","authors":{"name":"reubenliengaard","title":"Maintainer","url":"https://github.com/reubenliengaard","image_url":"https://github.com/reubenliengaard.png","imageURL":"https://github.com/reubenliengaard.png"},"tags":["spatial","gis"]},"prevItem":{"title":"Average Price Paid Parish","permalink":"/blog/average-price-paid-parish"}},"content":"## Connect to server\\n\\nStarting a psql instance on the client in order to interact with the database on the server.\\n\\n```\\npsql -h 192.168.88.10 -U postgres gis\\n```\\n## Create prices table\\n\\nCreating a new empty table, with an auto incrementing primary key of type serial, and text and integer\\ncolumns for postcodes and pounds respectively.\\n\\n```\\nCREATE TABLE prices (\\np_prices_id serial PRIMARY KEY,\\np_postcode TEXT NOT NULL,\\npounds INTEGER NOT NULL\\n);\\n```\\n## Create location table\\n\\nCreating a similar empty table for locations, but with latitude, and longitude columns rather instead of a\\npounds column.\\n\\n```\\nCREATE TABLE coordinates (\\nc_id serial PRIMARY KEY,\\nc_postcode TEXT NOT NULL,\\nlatitude FLOAT NOT NULL,\\nlongitude FLOAT NOT NULL\\n);\\n```\\n## Populate prices table\\n\\n\\nImporting the prices data into the new price column using the \\\\copy command in psql.\\n\\n```\\n\\\\copy prices(p_postcode, pounds) FROM \'/home/reuben/Downloads/prices.csv\'\\nDELIMITER \',\' CSV HEADER;\\n```\\n## Populate coordinates table\\n\\nRepeating the process for the coordinates data.\\n\\n```\\n\\\\copy coordinates(c_postcode, latitude, longitude) FROM\\n\'/home/reuben/Downloads/coordinates.csv\' DELIMITER \',\' CSV HEADER;\\n```\\n# Join coordinates and prices into points\\n\\nUsing the SQL join command to make a new table containing the prices and coordinates which share the\\nsame postcode.\\n\\n### SELECT\\n\\n```\\nc_id,\\nc_postcode,\\nlatitude,\\nlongitude,\\npounds\\nINTO points\\nFROM coordinates INNER JOIN prices\\nON coordinates.c_postcode = prices.p_postcode;\\n```\\n# Add geometry column to points\\n\\nAdding an geometry column to the new table.\\n\\n```\\nALTER TABLE points ADD COLUMN geom GEOMETRY(Point, 4326 );\\n```\\n# Update points from coordinates\\n\\nPopulating the geometry column with points created using the contents of the latitude and longitude\\ncolumns.\\n\\n\\n```\\nUPDATE points SET geom = ST_SETSRID(ST_MakePoint(longitude,\\nlatitude), 4326 );\\n```\\n# Create priced polygons\\n\\nCreating a duplicate polygon for every point it contains, and appending the point price paid to it.\\n\\n### SELECT\\n\\n```\\nc_id,\\nparcels.wkb_geometry,\\npoints.pounds\\nINTO polygons\\nFROM\\nparcels INNER JOIN points\\nON st_contains(parcels.wkb_geometry, points.geom);\\n```\\n## Find avarage point value for duplicate polygons\\n\\nAvaraging the values of the duplicate polygons into one. I\'m sure there must be a more efficient way of\\ndoing this with less steps, I will have to look into it.\\n\\n```\\nSELECT c_id,geom,avg(pounds)\\nINTO avg_polygons\\nFROM polygons\\nGROUP BY geom;\\n```\\n## Import new price paid polygons to file\\n\\nUsing Qgis to export the table from the database.\\n\\n```\\nQgis > Database > DB Manager > Import Layer/File - Name: avg_polygons\\n```\\n## Add price paid polygons layer to Qgis\\n\\nDisplaying the layer in Qgis.\\n\\n```\\nQgis > Layer > Add Layer > Add Vector Layer\\nQgis > Database > DB Manager > Import Layer/File - Name: avg_polygons\\nVector Dataset(s): .shp\\n```\\n## Colour polygons by attribute field\\n\\nTweaking the layer properties in order to create a nice visual effect.\\n\\n```\\nRight click: Layer > Properties\\n```\\n\\n```\\nSymbology > Single Symbol: Graduated\\nValue: pounds\\nColour Ramp: Spectral\\nInvert Colour Ramp\\nSegmentation: Equal Interval\\n```\\nI think that some of the postcodes have fallen outside of their intended polygons, for the next project I will\\nuse a set of polygons with less resolution.\\n\\n#"}]}')}}]);