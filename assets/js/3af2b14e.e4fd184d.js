"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[4853],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(a),g=n,f=p["".concat(s,".").concat(g)]||p[g]||u[g]||r;return a?o.createElement(f,i(i({ref:t},d),{},{components:a})):o.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}g.displayName="MDXCreateElement"},4097:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=a(7462),n=(a(7294),a(3905));const r={sidebar_position:1},i="Bristol city council GeoJson files",l={unversionedId:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-bristol-city-council-geojson-files",id:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-bristol-city-council-geojson-files",title:"Bristol city council GeoJson files",description:"Download all spatial data in gejson format",source:"@site/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-bristol-city-council-geojson-files.md",sourceDirName:"geospatial-analysis/upload-data-to-postgis-with-linux-shell",slug:"/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-bristol-city-council-geojson-files",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-bristol-city-council-geojson-files",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Uploading Data to PostGIS with Linux Shell",permalink:"/docs/category/uploading-data-to-postgis-with-linux-shell"},next:{title:"Loading Land registry inspire polygons",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-land-registry-inspire-polygons"}},s={},c=[{value:"Download all spatial data in gejson format",id:"download-all-spatial-data-in-gejson-format",level:3},{value:"Create new schema for council data",id:"create-new-schema-for-council-data",level:3},{value:"Upload bristol council data to new schema in postgis database",id:"upload-bristol-council-data-to-new-schema-in-postgis-database",level:3},{value:"With ogr2ogr",id:"with-ogr2ogr",level:4},{value:"Upload data with ogr2ogr",id:"upload-data-with-ogr2ogr",level:3},{value:"Or ashtun loader?",id:"or-ashtun-loader",level:3},{value:"References",id:"references",level:2}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"bristol-city-council-geojson-files"},"Bristol city council GeoJson files"),(0,n.kt)("h3",{id:"download-all-spatial-data-in-gejson-format"},"Download all spatial data in gejson format"),(0,n.kt)("h3",{id:"create-new-schema-for-council-data"},"Create new schema for council data"),(0,n.kt)("h3",{id:"upload-bristol-council-data-to-new-schema-in-postgis-database"},"Upload bristol council data to new schema in postgis database"),(0,n.kt)("h4",{id:"with-ogr2ogr"},"With ogr2ogr"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'ogr2ogr -f "PostgreSQL" PG:"dbname=your-database-name user=your-username password=mypassword" /path/to/jour/GeoJSon/file -nln table-name\n')),(0,n.kt)("h3",{id:"upload-data-with-ogr2ogr"},"Upload data with ogr2ogr"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"ogr2ogr \\\n-f \"PostgreSQL\" \\\n-a_srs \"EPSG:27700\" \\\n-t_srs \"EPSG:4326\" \\\n-nln parcels \\\n-progress \\\nPG:\"dbname='gis' host='$ip' port='5432' user='$user'\npassword='$password'\" \\\nLand_Registry_Cadastral_Parcels.gml\n")),(0,n.kt)("h3",{id:"or-ashtun-loader"},"Or ashtun loader?"),(0,n.kt)("h2",{id:"references"},"References"))}p.isMDXComponent=!0}}]);