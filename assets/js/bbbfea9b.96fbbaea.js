"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[8535],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),g=a,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||r;return n?o.createElement(m,i(i({ref:t},c),{},{components:n})):o.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={slug:"price-paid-polygons",title:"Price Paid Polygons",authors:{name:"reubenliengaard",title:"Maintainer",url:"https://github.com/reubenliengaard",image_url:"https://github.com/reubenliengaard.png"},tags:["spatial","gis"]},i="Price Paid Cadastral - test",l={permalink:"/blog/price-paid-polygons",editUrl:"https://github.com/reubenliengaard/reubenliengaard.gihtub.io/blog/2019-05-28-price-paid-polygons.md",source:"@site/blog/2019-05-28-price-paid-polygons.md",title:"Price Paid Polygons",description:"Connect to server",date:"2019-05-28T00:00:00.000Z",formattedDate:"May 28, 2019",tags:[{label:"spatial",permalink:"/blog/tags/spatial"},{label:"gis",permalink:"/blog/tags/gis"}],readingTime:2.55,hasTruncateMarker:!1,authors:[{name:"reubenliengaard",title:"Maintainer",url:"https://github.com/reubenliengaard",image_url:"https://github.com/reubenliengaard.png",imageURL:"https://github.com/reubenliengaard.png"}],frontMatter:{slug:"price-paid-polygons",title:"Price Paid Polygons",authors:{name:"reubenliengaard",title:"Maintainer",url:"https://github.com/reubenliengaard",image_url:"https://github.com/reubenliengaard.png",imageURL:"https://github.com/reubenliengaard.png"},tags:["spatial","gis"]},prevItem:{title:"Average Price Paid Parish",permalink:"/blog/average-price-paid-parish"}},p={authorsImageUrls:[void 0]},s=[{value:"Connect to server",id:"connect-to-server",level:2},{value:"Create prices table",id:"create-prices-table",level:2},{value:"Create location table",id:"create-location-table",level:2},{value:"Populate prices table",id:"populate-prices-table",level:2},{value:"Populate coordinates table",id:"populate-coordinates-table",level:2},{value:"SELECT",id:"select",level:3},{value:"SELECT",id:"select-1",level:3},{value:"Find avarage point value for duplicate polygons",id:"find-avarage-point-value-for-duplicate-polygons",level:2},{value:"Import new price paid polygons to file",id:"import-new-price-paid-polygons-to-file",level:2},{value:"Add price paid polygons layer to Qgis",id:"add-price-paid-polygons-layer-to-qgis",level:2},{value:"Colour polygons by attribute field",id:"colour-polygons-by-attribute-field",level:2}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"connect-to-server"},"Connect to server"),(0,a.kt)("p",null,"Starting a psql instance on the client in order to interact with the database on the server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"psql -h 192.168.88.10 -U postgres gis\n")),(0,a.kt)("h2",{id:"create-prices-table"},"Create prices table"),(0,a.kt)("p",null,"Creating a new empty table, with an auto incrementing primary key of type serial, and text and integer\ncolumns for postcodes and pounds respectively."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE TABLE prices (\np_prices_id serial PRIMARY KEY,\np_postcode TEXT NOT NULL,\npounds INTEGER NOT NULL\n);\n")),(0,a.kt)("h2",{id:"create-location-table"},"Create location table"),(0,a.kt)("p",null,"Creating a similar empty table for locations, but with latitude, and longitude columns rather instead of a\npounds column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE TABLE coordinates (\nc_id serial PRIMARY KEY,\nc_postcode TEXT NOT NULL,\nlatitude FLOAT NOT NULL,\nlongitude FLOAT NOT NULL\n);\n")),(0,a.kt)("h2",{id:"populate-prices-table"},"Populate prices table"),(0,a.kt)("p",null,"Importing the prices data into the new price column using the \\copy command in psql."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\\copy prices(p_postcode, pounds) FROM '/home/reuben/Downloads/prices.csv'\nDELIMITER ',' CSV HEADER;\n")),(0,a.kt)("h2",{id:"populate-coordinates-table"},"Populate coordinates table"),(0,a.kt)("p",null,"Repeating the process for the coordinates data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\\copy coordinates(c_postcode, latitude, longitude) FROM\n'/home/reuben/Downloads/coordinates.csv' DELIMITER ',' CSV HEADER;\n")),(0,a.kt)("h1",{id:"join-coordinates-and-prices-into-points"},"Join coordinates and prices into points"),(0,a.kt)("p",null,"Using the SQL join command to make a new table containing the prices and coordinates which share the\nsame postcode."),(0,a.kt)("h3",{id:"select"},"SELECT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"c_id,\nc_postcode,\nlatitude,\nlongitude,\npounds\nINTO points\nFROM coordinates INNER JOIN prices\nON coordinates.c_postcode = prices.p_postcode;\n")),(0,a.kt)("h1",{id:"add-geometry-column-to-points"},"Add geometry column to points"),(0,a.kt)("p",null,"Adding an geometry column to the new table."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ALTER TABLE points ADD COLUMN geom GEOMETRY(Point, 4326 );\n")),(0,a.kt)("h1",{id:"update-points-from-coordinates"},"Update points from coordinates"),(0,a.kt)("p",null,"Populating the geometry column with points created using the contents of the latitude and longitude\ncolumns."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"UPDATE points SET geom = ST_SETSRID(ST_MakePoint(longitude,\nlatitude), 4326 );\n")),(0,a.kt)("h1",{id:"create-priced-polygons"},"Create priced polygons"),(0,a.kt)("p",null,"Creating a duplicate polygon for every point it contains, and appending the point price paid to it."),(0,a.kt)("h3",{id:"select-1"},"SELECT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"c_id,\nparcels.wkb_geometry,\npoints.pounds\nINTO polygons\nFROM\nparcels INNER JOIN points\nON st_contains(parcels.wkb_geometry, points.geom);\n")),(0,a.kt)("h2",{id:"find-avarage-point-value-for-duplicate-polygons"},"Find avarage point value for duplicate polygons"),(0,a.kt)("p",null,"Avaraging the values of the duplicate polygons into one. I'm sure there must be a more efficient way of\ndoing this with less steps, I will have to look into it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELECT c_id,geom,avg(pounds)\nINTO avg_polygons\nFROM polygons\nGROUP BY geom;\n")),(0,a.kt)("h2",{id:"import-new-price-paid-polygons-to-file"},"Import new price paid polygons to file"),(0,a.kt)("p",null,"Using Qgis to export the table from the database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Qgis > Database > DB Manager > Import Layer/File - Name: avg_polygons\n")),(0,a.kt)("h2",{id:"add-price-paid-polygons-layer-to-qgis"},"Add price paid polygons layer to Qgis"),(0,a.kt)("p",null,"Displaying the layer in Qgis."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Qgis > Layer > Add Layer > Add Vector Layer\nQgis > Database > DB Manager > Import Layer/File - Name: avg_polygons\nVector Dataset(s): .shp\n")),(0,a.kt)("h2",{id:"colour-polygons-by-attribute-field"},"Colour polygons by attribute field"),(0,a.kt)("p",null,"Tweaking the layer properties in order to create a nice visual effect."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Right click: Layer > Properties\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Symbology > Single Symbol: Graduated\nValue: pounds\nColour Ramp: Spectral\nInvert Colour Ramp\nSegmentation: Equal Interval\n")),(0,a.kt)("p",null,"I think that some of the postcodes have fallen outside of their intended polygons, for the next project I will\nuse a set of polygons with less resolution."),(0,a.kt)("h1",{id:""}))}d.isMDXComponent=!0}}]);