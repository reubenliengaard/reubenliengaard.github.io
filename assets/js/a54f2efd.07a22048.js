"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[4386],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},674:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:4},l="Setup rclone",i={unversionedId:"desktop-linux/setup-rclone",id:"desktop-linux/setup-rclone",title:"Setup rclone",description:"Install rclone from the package manager",source:"@site/docs/desktop-linux/setup-rclone.md",sourceDirName:"desktop-linux",slug:"/desktop-linux/setup-rclone",permalink:"/docs/desktop-linux/setup-rclone",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Provisioning Fedora Workstation",permalink:"/docs/desktop-linux/provisioning-fedora-workstation"},next:{title:"Configuring Visual Studio Code",permalink:"/docs/desktop-linux/configuring-visual-studio-code"}},c={},s=[{value:"Install rclone from the package manager",id:"install-rclone-from-the-package-manager",level:3},{value:"Run the rclone configuration wizard to set up a remote storage provider",id:"run-the-rclone-configuration-wizard-to-set-up-a-remote-storage-provider",level:3},{value:"Open the rclone service file in a text editor",id:"open-the-rclone-service-file-in-a-text-editor",level:3},{value:"Add the following content to the service file",id:"add-the-following-content-to-the-service-file",level:3},{value:"Check the status of the rclone service",id:"check-the-status-of-the-rclone-service",level:3},{value:"Start the rclone service immediately",id:"start-the-rclone-service-immediately",level:3},{value:"Enable the rclone service to start at boot",id:"enable-the-rclone-service-to-start-at-boot",level:3},{value:"Reload the system manager configuration",id:"reload-the-system-manager-configuration",level:3}],u={toc:s};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"setup-rclone"},"Setup rclone"),(0,o.kt)("h3",{id:"install-rclone-from-the-package-manager"},"Install rclone from the package manager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf install rclone\n")),(0,o.kt)("h3",{id:"run-the-rclone-configuration-wizard-to-set-up-a-remote-storage-provider"},"Run the rclone configuration wizard to set up a remote storage provider"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rclone config\n")),(0,o.kt)("h3",{id:"open-the-rclone-service-file-in-a-text-editor"},"Open the rclone service file in a text editor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo vim ~/.config/systemd/user/rclone.service\n")),(0,o.kt)("h3",{id:"add-the-following-content-to-the-service-file"},"Add the following content to the service file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[Unit]\nDescription=Rclone Sync\nAfter=network.target\n\n[Service]\nType=simple\n# Specify the sync command to be run at boot\nExecStart=/usr/bin/rclone sync /Documents/ google:Documents/ \n# Restart the service if it fails\nRestart=on-failure\n\n[Install]\n# Enable the service to start at boot\nWantedBy=multi-user.target\n")),(0,o.kt)("h3",{id:"check-the-status-of-the-rclone-service"},"Check the status of the rclone service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user status rclone.service\n")),(0,o.kt)("h3",{id:"start-the-rclone-service-immediately"},"Start the rclone service immediately"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user start rclone.service\n")),(0,o.kt)("h3",{id:"enable-the-rclone-service-to-start-at-boot"},"Enable the rclone service to start at boot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user enable rclone.service\n")),(0,o.kt)("h3",{id:"reload-the-system-manager-configuration"},"Reload the system manager configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user daemon-reload\n")))}p.isMDXComponent=!0}}]);