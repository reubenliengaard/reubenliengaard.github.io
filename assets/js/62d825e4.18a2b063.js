"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[327],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>g});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),u=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=u(e.components);return n.createElement(p.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(t),c=r,g=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return t?n.createElement(g,l(l({ref:a},s),{},{components:t})):n.createElement(g,l({ref:a},s))}));function g(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8217:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=t(7462),r=(t(7294),t(3905));const o={sidebar_position:2},l="Grafana + Influxdb with Podman",i={unversionedId:"automation/deploy-automation-stack-with-podman",id:"automation/deploy-automation-stack-with-podman",title:"Grafana + Influxdb with Podman",description:"Create a pod",source:"@site/docs/automation/deploy-automation-stack-with-podman.md",sourceDirName:"automation",slug:"/automation/deploy-automation-stack-with-podman",permalink:"/docs/automation/deploy-automation-stack-with-podman",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cisco c9800-CL with KVM",permalink:"/docs/automation/cisco-wifi-controller-with-kvm"},next:{title:"Read Sensors with Python",permalink:"/docs/category/read-sensors-with-python"}},p={},u=[{value:"Create a pod",id:"create-a-pod",level:3},{value:"Pull geoserver image",id:"pull-geoserver-image",level:3},{value:"Run image in pod",id:"run-image-in-pod",level:3},{value:"Pull postgis image",id:"pull-postgis-image",level:3},{value:"Run image in pod",id:"run-image-in-pod-1",level:3},{value:"Generate YAML file",id:"generate-yaml-file",level:3},{value:"Test YAML file",id:"test-yaml-file",level:3},{value:"Here&#39;s the YAML file",id:"heres-the-yaml-file",level:2}],s={toc:u};function m(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"grafana--influxdb-with-podman"},"Grafana + Influxdb with Podman"),(0,r.kt)("h3",{id:"create-a-pod"},"Create a pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod create -p 8086:8086  -p 3000:3000 -n automation\n")),(0,r.kt)("h3",{id:"pull-geoserver-image"},"Pull geoserver image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull grafana/grafana\n")),(0,r.kt)("h3",{id:"run-image-in-pod"},"Run image in pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name grafana \\\n--pod automation \\\ngrafana/grafana\n")),(0,r.kt)("h3",{id:"pull-postgis-image"},"Pull postgis image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull influxdb:latest\n")),(0,r.kt)("h3",{id:"run-image-in-pod-1"},"Run image in pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name influxdb \\\n--pod automation \\\ninfluxdb:latest\n")),(0,r.kt)("h3",{id:"generate-yaml-file"},"Generate YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman generate kube automation-stack-podman.yaml\n")),(0,r.kt)("h3",{id:"test-yaml-file"},"Test YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf postgis\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf geoserver\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod rm spatial\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman play kube automation-stack-podman.yaml\n")),(0,r.kt)("h2",{id:"heres-the-yaml-file"},"Here's the YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n\n\n")))}m.isMDXComponent=!0}}]);