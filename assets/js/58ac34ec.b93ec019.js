"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[4912],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,g=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2},a="Installing Cisco Cloud Wireless Controller with KVM",s={unversionedId:"environmental-monitoring/installing-cisco-cloud-wireless-controller",id:"environmental-monitoring/installing-cisco-cloud-wireless-controller",title:"Installing Cisco Cloud Wireless Controller with KVM",description:"Cisco c9800-CL with KVM",source:"@site/docs/environmental-monitoring/installing-cisco-cloud-wireless-controller.md",sourceDirName:"environmental-monitoring",slug:"/environmental-monitoring/installing-cisco-cloud-wireless-controller",permalink:"/docs/environmental-monitoring/installing-cisco-cloud-wireless-controller",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Provisioning Fedora CoreOS on the Raspberry Pi 4",permalink:"/docs/environmental-monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4"},next:{title:"Reading sensors with Python",permalink:"/docs/category/reading-sensors-with-python"}},l={},c=[{value:"Cisco c9800-CL with KVM",id:"cisco-c9800-cl-with-kvm",level:2},{value:"What?",id:"what",level:3},{value:"Install virtualization sowftware group",id:"install-virtualization-sowftware-group",level:3},{value:"Enable libvirtd service",id:"enable-libvirtd-service",level:3},{value:"Create network bridge br10",id:"create-network-bridge-br10",level:2},{value:"Install Virtual Machine",id:"install-virtual-machine",level:2},{value:"If you need to start again, use this to destroy the VM",id:"if-you-need-to-start-again-use-this-to-destroy-the-vm",level:3},{value:"Configure the controller",id:"configure-the-controller",level:3},{value:"Access the GUI",id:"access-the-gui",level:3},{value:"References",id:"references",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installing-cisco-cloud-wireless-controller-with-kvm"},"Installing Cisco Cloud Wireless Controller with KVM"),(0,i.kt)("h2",{id:"cisco-c9800-cl-with-kvm"},"Cisco c9800-CL with KVM"),(0,i.kt)("h3",{id:"what"},"What?"),(0,i.kt)("p",null,"The Cisco Catalyst c9800-CL is a wireless controller that is part of the Cisco Catalyst 9800 series. It is designed to manage and secure wireless networks, and provides features such as wireless intrusion prevention, location services, and guest access. The c9800-CL model is a cloud-based controller that is designed to be deployed in a virtual environment, and can be used to manage both on-premises and cloud-based wireless networks."),(0,i.kt)("h3",{id:"install-virtualization-sowftware-group"},"Install virtualization sowftware group"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf group install --with-optional virtualization\n")),(0,i.kt)("h3",{id:"enable-libvirtd-service"},"Enable libvirtd service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start libvirtd && sudo systemctl enable libvirtd\n")),(0,i.kt)("h2",{id:"create-network-bridge-br10"},"Create network bridge br10"),(0,i.kt)("p",null,"???"),(0,i.kt)("h2",{id:"install-virtual-machine"},"Install Virtual Machine"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"virt-install \\\n--connect=qemu:///system \\\n--os-variant=rhel4.0 \\\n--arch=x86_64 \\\n--cpu host \\\n--console pty,target_type=virtio \\\n--hvm \\\n--import \\\n--name=my_c9k_vm \\\n--disk path=C9800-CL.qcow2,bus=ide,format=qcow2,backing_store \\\n--vcpus=1,sockets=1,cores=1,threads=1 \\\n--ram=4096 \\\n--network=network:model=virtio \\\n--network=network:br10,model=virtio \\\n--network=network:model=virtio  \\\n--noreboot \n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We use the backing_store option to virt-install --disk to quickly create a new disk image and avoid writing to the original image we have downloaded. This new disk image can be easily thrown away."),(0,i.kt)("h3",{parentName:"blockquote",id:"to-exit-kvm"},"To exit KVM"),(0,i.kt)("p",{parentName:"blockquote"},"CTRL + ] ")),(0,i.kt)("h3",{id:"if-you-need-to-start-again-use-this-to-destroy-the-vm"},"If you need to start again, use this to destroy the VM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"virsh destroy fcos\nvirsh undefine --remove-all-storage fcos\n")),(0,i.kt)("h3",{id:"configure-the-controller"},"Configure the controller"),(0,i.kt)("p",null,'The wireless controller is configured with this script. It sets the hostname of the controller to "9800-1" and creates a user with the name "admin" and password "Cisco123", giving the user privilege level 15. The Gigabit Ethernet interfaces 1 and 2 are then configured, with interface 1 being set up with a static IP address and interface 2 being set up as a trunk port with native VLAN 77. VLAN 77 is created and assigned an IP address, and static routes for the 10.10.10.0/24 and 0.0.0.0/0 networks are set up. The 5 GHz and 2.4 GHz radios on the controller are shut down, the country code is set to Great Britain, and the radios are re-enabled. Finally, the virtual wireless LAN controller (VWLC) is configured and the DNS server is set to 1.1.1.1 and the NTP server to pool.ntp.org.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ios"},"conf t\nhostname 9800-1\nuser-name admin\n privilege 15\n password 0 Cisco123\n exit\nint gig 1\n no switchport\n ip address 10.10.10.10 255.255.255.0\n no shut\n exit\nint gig 2\n switchport\n switchport mode trunk\n switchport trunk native vlan 77\n no shut\n exit\nint vlan 77\n ip address 192.168.77.10 255.255.255.0\n no shut\n exit\nip route 10.10.10.0 255.255.255.0 10.10.10.1\nip route 0.0.0.0 0.0.0.0 192.168.77.1\nwireless management interface vlan 77\nap dot11 5ghz shutdown \nap dot11 24ghz shutdown \nap country GB\nno ap dot11 5ghz shutdown\nno ap dot11 24ghz shutdown\nexit\nwireless config vwlc-ssc key-size 2048 signature-algo sha256 password 0 Cisco123\nconf t\nip name-server 1.1.1.1\nntp server pool.ntp.org\n")),(0,i.kt)("h3",{id:"access-the-gui"},"Access the GUI"),(0,i.kt)("p",null,"Now the GUI can be accessed at 192.168.77.1, login and go through the sero day configuration steps to setup a wireless network."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-virtualization/"},"FedoraVirtGuide")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cisco.com/c/en/us/td/docs/wireless/controller/9800/9800-cloud/installation/b-c9800-cl-install-guide/installing_the_controller_in_kvm_environment.html"},"CiscoGuide")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/6ttSeDTODWM"},"CiscoSal")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/MeDwvj0LxhU"},"wireless_boi")))}u.isMDXComponent=!0}}]);