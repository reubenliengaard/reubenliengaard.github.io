"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[8591],{3905:(a,t,e)=>{e.d(t,{Zo:()=>c,kt:()=>b});var r=e(7294);function o(a,t,e){return t in a?Object.defineProperty(a,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):a[t]=e,a}function n(a,t){var e=Object.keys(a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(a);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(a,t).enumerable}))),e.push.apply(e,r)}return e}function i(a){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?n(Object(e),!0).forEach((function(t){o(a,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(e)):n(Object(e)).forEach((function(t){Object.defineProperty(a,t,Object.getOwnPropertyDescriptor(e,t))}))}return a}function l(a,t){if(null==a)return{};var e,r,o=function(a,t){if(null==a)return{};var e,r,o={},n=Object.keys(a);for(r=0;r<n.length;r++)e=n[r],t.indexOf(e)>=0||(o[e]=a[e]);return o}(a,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);for(r=0;r<n.length;r++)e=n[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(a,e)&&(o[e]=a[e])}return o}var d=r.createContext({}),s=function(a){var t=r.useContext(d),e=t;return a&&(e="function"==typeof a?a(t):i(i({},t),a)),e},c=function(a){var t=s(a.components);return r.createElement(d.Provider,{value:t},a.children)},u="mdxType",p={inlineCode:"code",wrapper:function(a){var t=a.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(a,t){var e=a.components,o=a.mdxType,n=a.originalType,d=a.parentName,c=l(a,["components","mdxType","originalType","parentName"]),u=s(e),g=o,b=u["".concat(d,".").concat(g)]||u[g]||p[g]||n;return e?r.createElement(b,i(i({ref:t},c),{},{components:e})):r.createElement(b,i({ref:t},c))}));function b(a,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof a||o){var n=e.length,i=new Array(n);i[0]=g;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=a,l[u]="string"==typeof a?a:o,i[1]=l;for(var s=2;s<n;s++)i[s]=e[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}g.displayName="MDXCreateElement"},9409:(a,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>s});var r=e(7462),o=(e(7294),e(3905));const n={sidebar_position:2},i="Upload Bristol City Council Data",l={unversionedId:"adding-data-into-the-database/upload-bristol-city-council-data",id:"adding-data-into-the-database/upload-bristol-city-council-data",title:"Upload Bristol City Council Data",description:"download all spatial data in gejson format",source:"@site/docs/adding-data-into-the-database/upload-bristol-city-council-data.md",sourceDirName:"adding-data-into-the-database",slug:"/adding-data-into-the-database/upload-bristol-city-council-data",permalink:"/docs/adding-data-into-the-database/upload-bristol-city-council-data",draft:!1,editUrl:"https://github.com/reubenliengaard/docs/adding-data-into-the-database/upload-bristol-city-council-data.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Upload Ordnance Survey MasterMap Topography",permalink:"/docs/adding-data-into-the-database/upload-ordnance-survey-mastermap-topography"},next:{title:"Upload Ordnance Survey Satellite Imagery",permalink:"/docs/adding-data-into-the-database/upload-ordnance-survey-satellite-imagery"}},d={},s=[{value:"download all spatial data in gejson format",id:"download-all-spatial-data-in-gejson-format",level:2},{value:"create new schema for council data",id:"create-new-schema-for-council-data",level:2},{value:"upload bristol council data to new schema in postgis database",id:"upload-bristol-council-data-to-new-schema-in-postgis-database",level:2},{value:"with ogr2ogr",id:"with-ogr2ogr",level:3},{value:"upload data with ogr2ogr",id:"upload-data-with-ogr2ogr",level:2},{value:"or ashtun loader?",id:"or-ashtun-loader",level:3}],c={toc:s};function u(a){let{components:t,...e}=a;return(0,o.kt)("wrapper",(0,r.Z)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"upload-bristol-city-council-data"},"Upload Bristol City Council Data"),(0,o.kt)("h2",{id:"download-all-spatial-data-in-gejson-format"},"download all spatial data in gejson format"),(0,o.kt)("h2",{id:"create-new-schema-for-council-data"},"create new schema for council data"),(0,o.kt)("h2",{id:"upload-bristol-council-data-to-new-schema-in-postgis-database"},"upload bristol council data to new schema in postgis database"),(0,o.kt)("h3",{id:"with-ogr2ogr"},"with ogr2ogr"),(0,o.kt)("p",null,'ogr2ogr -f "PostgreSQL" PG:"dbname=your-database-name user=your-username password=mypassword" /path/to/jour/GeoJSon/file -nln table-name'),(0,o.kt)("h2",{id:"upload-data-with-ogr2ogr"},"upload data with ogr2ogr"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ogr2ogr \\\n-f \"PostgreSQL\" \\\n-a_srs \"EPSG:27700\" \\\n-t_srs \"EPSG:4326\" \\\n-nln parcels \\\n-progress \\\nPG:\"dbname='gis' host='$ip' port='5432' user='$user'\npassword='$password'\" \\\nLand_Registry_Cadastral_Parcels.gml\n")),(0,o.kt)("h3",{id:"or-ashtun-loader"},"or ashtun loader?"))}u.isMDXComponent=!0}}]);