"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[9898],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},a="Provisioning Fedora CoreOS on the Raspberry Pi 4",s={unversionedId:"environmental-monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",id:"environmental-monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",title:"Provisioning Fedora CoreOS on the Raspberry Pi 4",description:"prep seperate usb for firmware",source:"@site/docs/environmental-monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4.md",sourceDirName:"environmental-monitoring",slug:"/environmental-monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",permalink:"/docs/environmental-monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Environmental Monitoring",permalink:"/docs/category/environmental-monitoring"},next:{title:"Installing Cisco Cloud Wireless Controller with KVM",permalink:"/docs/environmental-monitoring/installing-cisco-cloud-wireless-controller"}},l={},c=[{value:"prep seperate usb for firmware",id:"prep-seperate-usb-for-firmware",level:3},{value:"Install CoreOS tools",id:"install-coreos-tools",level:3},{value:"Make working directory and change to it",id:"make-working-directory-and-change-to-it",level:3},{value:"Download CoreOS image",id:"download-coreos-image",level:3},{value:"Rename image to simpler name",id:"rename-image-to-simpler-name",level:3},{value:"Create rpict.bu",id:"create-rpictbu",level:3},{value:"Transpile butane file into an ignition file",id:"transpile-butane-file-into-an-ignition-file",level:3},{value:"Test ignition file in virtual machine",id:"test-ignition-file-in-virtual-machine",level:2},{value:"Setup the correct SELinux label to allow access to the config",id:"setup-the-correct-selinux-label-to-allow-access-to-the-config",level:4},{value:"Start a Fedora CoreOS virtual machine",id:"start-a-fedora-coreos-virtual-machine",level:4},{value:"Exit and destroy virtual machine",id:"exit-and-destroy-virtual-machine",level:4},{value:"Write to disk",id:"write-to-disk",level:3},{value:"Reference",id:"reference",level:2},{value:"To do",id:"to-do",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"provisioning-fedora-coreos-on-the-raspberry-pi-4"},"Provisioning Fedora CoreOS on the Raspberry Pi 4"),(0,i.kt)("h3",{id:"prep-seperate-usb-for-firmware"},"prep seperate usb for firmware"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"VERSION=v1.32  # use latest one from https://github.com/pftf/RPi4/releases\nUEFIDISK=/dev/sdX\nsudo mkfs.vfat $UEFIDISK\nmkdir /tmp/UEFIdisk\nsudo mount $UEFIDISK /tmp/UEFIdisk\npushd /tmp/UEFIdisk\nsudo curl -LO https://github.com/pftf/RPi4/releases/download/${VERSION}/RPi4_UEFI_Firmware_${VERSION}.zip\nsudo unzip RPi4_UEFI_Firmware_${VERSION}.zip\nsudo rm RPi4_UEFI_Firmware_${VERSION}.zip\npopd\nsudo umount /tmp/UEFIdisk\n")),(0,i.kt)("h3",{id:"install-coreos-tools"},"Install CoreOS tools"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf install -y rpi-imager coreos-installer butane ignition-validate\n")),(0,i.kt)("h3",{id:"make-working-directory-and-change-to-it"},"Make working directory and change to it"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/coreos\ncd ~/coreos\n")),(0,i.kt)("h3",{id:"download-coreos-image"},"Download CoreOS image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"coreos-installer download -p qemu -f qcow2.xz --decompress\n")),(0,i.kt)("h3",{id:"rename-image-to-simpler-name"},"Rename image to simpler name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mv *.qcow2 fedora-coreos.qcow2\n")),(0,i.kt)("h3",{id:"create-rpictbu"},"Create rpict.bu"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'variant: fcos\nversion: 1.4.0\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAA...\nsystemd:\n  units:\n    - name: serial-getty@ttyS0.service\n      dropins:\n      - name: autologin-core.conf\n        contents: |\n          [Service]\n          # Override Execstart in main unit\n          ExecStart=\n          # Add new Execstart with `-` prefix to ignore failure\n          ExecStart=-/usr/sbin/agetty --autologin core --noclear %I $TERM\n          TTYVTDisallocate=no\n    - name: failure.service\n      enabled: true\n      contents: |\n        [Service]\n        Type=oneshot\n        ExecStart=/usr/bin/false\n        RemainAfterExit=yes\n\n        [Install]\n        WantedBy=multi-user.target\n    - name: etcd-member.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Run a single node etcd\n        After=network-online.target\n        Wants=network-online.target\n\n        [Service]\n        ExecStartPre=mkdir -p /var/lib/rpict2mqtt\n        ExecStartPre=-/bin/podman kill rpict2mqtt\n        ExecStartPre=-/bin/podman rm rpict2mqtt\n        ExecStartPre=-/bin/podman pull docker.io/gtricot/rpict-mqtt:latest\n        ExecStart=/bin/podman run --name rpict2mqtt \\\n                           --device=/dev/ttyAMA0:/dev/ttyAMA0 \\\n                            -e MQTT_URL="mqtt://my_mqtt_broker:1883" \\\n                           -e MQTT_USER="my-super-user" \\\n                           -e MQTT_PASSWORD="my-secret-password" \\\n                           -e MQTT_BASE_TOPIC="custom-rpict-topic" \\\n                           -e ABSOLUTE_VALUES=true \\\n                           -e SENSOR_VALUE_THRESHOLD=2 \\\n                            gtricot/rpict-mqtt\n        ExecStop=/bin/podman stop rpict2mqtt\n\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /etc/hostname\n      mode: 0644\n      contents:\n        inline: |\n          tutorial\n    - path: /etc/profile.d/systemd-pager.sh\n      mode: 0644\n      contents:\n        inline: |\n          # Tell systemd to not use a pager when printing information\n          export SYSTEMD_PAGER=cat\n')),(0,i.kt)("h3",{id:"transpile-butane-file-into-an-ignition-file"},"Transpile butane file into an ignition file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"butane --pretty --strict rpict.bu --output rpict.ign\n")),(0,i.kt)("h2",{id:"test-ignition-file-in-virtual-machine"},"Test ignition file in virtual machine"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ignition-validate rpict.ign && echo 'Success!'\n")),(0,i.kt)("h4",{id:"setup-the-correct-selinux-label-to-allow-access-to-the-config"},"Setup the correct SELinux label to allow access to the config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chcon --verbose --type svirt_home_t rpict.ign\n")),(0,i.kt)("h4",{id:"start-a-fedora-coreos-virtual-machine"},"Start a Fedora CoreOS virtual machine"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'virt-install --name=fcos --vcpus=2 --ram=2048 --os-variant=fedora-coreos-stable \\\n    --import --network=bridge=virbr0 --graphics=none \\\n    --qemu-commandline="-fw_cfg name=opt/com.coreos/config,file=${PWD}/rpict.ign" \\\n    --disk=size=20,backing_store=${PWD}/fedora-coreos.qcow2\n')),(0,i.kt)("h4",{id:"exit-and-destroy-virtual-machine"},"Exit and destroy virtual machine"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"CTRL + ] to exit kvm"),(0,i.kt)("h3",{parentName:"blockquote",id:"to-destroy-run"},"to destroy run"),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"virsh destroy fcos\nvirsh undefine --remove-all-storage fcos\n"))),(0,i.kt)("h3",{id:"write-to-disk"},"Write to disk"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"## set disc\nFCOSDISK=/dev/sdX\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Create customized.iso which:\ncoreos-installer iso customize \\\n    --architecture=aarch64 \\\n    --dest-device $FCOSDISK \\ # - Automatically installs to /dev/sda\n    --dest-ignition config.ign \\ # - Provisions with config.ign\n    --network-keyfile $networkManagerConnectionFile  \\ # -  network configuration\n    --ignition-ca ca.pem \\ # - Trusts HTTPS certificates signed by ca.pem\n    --post-install post.sh \\ # - Runs post.sh after installing\n    -o custom.iso input.iso\n")),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.fedoraproject.org/en-US/fedora-coreos/provisioning-raspberry-pi4/"},"FedoraOnRpi")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://coreos.github.io/coreos-installer/customizing-install/#customize-options"},"customizing-install")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/pftf/RPi4"},"pftf")),(0,i.kt)("h3",{id:"to-do"},"To do"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"setup MQTT gateway"),(0,i.kt)("li",{parentName:"ul"},"write CoreOS to SD and boot pi with external monitor"),(0,i.kt)("li",{parentName:"ul"},"test whether /dev/ttyAMA0 is accesible with CoreOS on RPI4")))}u.isMDXComponent=!0}}]);