"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[3508],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function n(e,t){if(null==e)return{};var a,r,l=function(e,t){if(null==e)return{};var a,r,l={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=r.createContext({}),d=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,l=e.mdxType,s=e.originalType,i=e.parentName,p=n(e,["components","mdxType","originalType","parentName"]),g=d(a),u=l,m=g["".concat(i,".").concat(u)]||g[u]||c[u]||s;return a?r.createElement(m,o(o({ref:t},p),{},{components:a})):r.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=a.length,o=new Array(s);o[0]=u;var n={};for(var i in t)hasOwnProperty.call(t,i)&&(n[i]=t[i]);n.originalType=e,n[g]="string"==typeof e?e:l,o[1]=n;for(var d=2;d<s;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1470:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>n,toc:()=>d});var r=a(7462),l=(a(7294),a(3905));const s={sidebar_position:5},o="Ordnance survey satellite imagery with raster2pgsql",n={unversionedId:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",id:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",title:"Ordnance survey satellite imagery with raster2pgsql",description:"Load sattelite data with either raster2pgsql or ogr2ogr",source:"@site/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery.md",sourceDirName:"geospatial-analysis/upload-data-to-postgis-with-linux-shell",slug:"/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Loading land registry lidar",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar"},next:{title:"PostGIS Data Management and Queries",permalink:"/docs/category/postgis-data-management-and-queries"}},i={},d=[{value:"Load sattelite data with either raster2pgsql or ogr2ogr",id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr",level:3},{value:"Connect to database",id:"connect-to-database",level:3},{value:"Create table",id:"create-table",level:2},{value:"Load sattelite data with either raster2pgsql or ogr2ogr",id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr-1",level:3},{value:"raster2pgsql",id:"raster2pgsql",level:3},{value:"ogr2ogr",id:"ogr2ogr",level:3},{value:"Add a spatial index",id:"add-a-spatial-index",level:3},{value:"References",id:"references",level:2}],p={toc:d};function g(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"ordnance-survey-satellite-imagery-with-raster2pgsql"},"Ordnance survey satellite imagery with raster2pgsql"),(0,l.kt)("h3",{id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr"},"Load sattelite data with either raster2pgsql or ogr2ogr"),(0,l.kt)("h3",{id:"connect-to-database"},"Connect to database"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"psql -h localhost -p 5432 -U postgres -P postgres -d public\n")),(0,l.kt)("h2",{id:"create-table"},"Create table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE bristol-osmm-satellite-imagery (\n  rast raster\n);\n")),(0,l.kt)("h3",{id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr-1"},"Load sattelite data with either raster2pgsql or ogr2ogr"),(0,l.kt)("h3",{id:"raster2pgsql"},"raster2pgsql"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"raster2pgsql -s 27700 -I -C -M *.tif -F bristol-osmm-satellite-imagery | psql -h localhost -d public -U username -P postgres\n")),(0,l.kt)("h3",{id:"ogr2ogr"},"ogr2ogr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'ogr2ogr -f "PostgreSQL" "PG:host=localhost user=postgres dbname=public password=postgres" *.tif -nln bristol-lidar-dtm --password=postgres\n')),(0,l.kt)("h3",{id:"add-a-spatial-index"},"Add a spatial index"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE INDEX bristol-lidar-dtm-gist ON bristol-lidar-dtm USING GIST (ST_ConvexHull(rast));\n")),(0,l.kt)("h2",{id:"references"},"References"))}g.isMDXComponent=!0}}]);