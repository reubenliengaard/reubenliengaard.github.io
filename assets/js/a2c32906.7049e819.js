"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[1205],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),g=r,f=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return a?n.createElement(f,o(o({ref:t},c),{},{components:a})):n.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},3244:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},o="Identify flat terrain with above average sun",s={unversionedId:"geospatial-analysis/python-for-gis/identify-flat-terrain-with-above-average-sun",id:"geospatial-analysis/python-for-gis/identify-flat-terrain-with-above-average-sun",title:"Identify flat terrain with above average sun",description:"To identify flat areas in lidar data using GDAL and GRASS in Python, you can use the following steps:",source:"@site/docs/geospatial-analysis/python-for-gis/identify-flat-terrain-with-above-average-sun.md",sourceDirName:"geospatial-analysis/python-for-gis",slug:"/geospatial-analysis/python-for-gis/identify-flat-terrain-with-above-average-sun",permalink:"/docs/geospatial-analysis/python-for-gis/identify-flat-terrain-with-above-average-sun",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Network Status Map",permalink:"/docs/geospatial-analysis/publishing-maps/network-status-map"},next:{title:"Artificial Intelligence",permalink:"/docs/category/artificial-intelligence"}},l={},p=[{value:"Import the necessary modules",id:"import-the-necessary-modules",level:3},{value:"Set the GRASS GIS environment",id:"set-the-grass-gis-environment",level:3},{value:"Import the lidar data into GRASS GIS",id:"import-the-lidar-data-into-grass-gis",level:3},{value:"Identify flat areas by selecting pixels with a slope less than a certain threshold",id:"identify-flat-areas-by-selecting-pixels-with-a-slope-less-than-a-certain-threshold",level:3}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"identify-flat-terrain-with-above-average-sun"},"Identify flat terrain with above average sun"),(0,r.kt)("p",null,"To identify flat areas in lidar data using GDAL and GRASS in Python, you can use the following steps:"),(0,r.kt)("h3",{id:"import-the-necessary-modules"},"Import the necessary modules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from osgeo import gdal\nimport grass.script as gs\n")),(0,r.kt)("h3",{id:"set-the-grass-gis-environment"},"Set the GRASS GIS environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"gisbase = '/usr/local/grass78'\ngs.set_gisbase(gisbase)\nlocation = 'location'\nmapset = 'mapset'\ngs.run_command('g.proj', georef='path/to/georeferenced_file.tif', location=location)\n")),(0,r.kt)("h3",{id:"import-the-lidar-data-into-grass-gis"},"Import the lidar data into GRASS GIS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"gs.run_command('r.in.lidar', input='path/to/lidar_data.las', output='lidar_data', flags='e')\n")),(0,r.kt)("p",null,"Calculate the slope of the lidar data using the r.slope.aspect module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"gs.run_command('r.slope.aspect', elevation='lidar_data', slope='slope', aspect='aspect')\n")),(0,r.kt)("h3",{id:"identify-flat-areas-by-selecting-pixels-with-a-slope-less-than-a-certain-threshold"},"Identify flat areas by selecting pixels with a slope less than a certain threshold"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'gs.mapcalc("flat = if(slope < 0.1, 1, null())")\n')),(0,r.kt)("p",null,"If you want to also consider sunlight exposure, you can use the r.sun module to calculate solar radiation and sky view factor. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"gs.run_command('r.sun', elevation='lidar_data', solar_radiation='solar_radiation', sky_view_factor='sky_view_factor')\n")),(0,r.kt)("p",null,"You can then use map algebra to select pixels that have both low slope and high solar radiation or sky view factor. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'gs.mapcalc("flat_sunny = if(slope < 0.1 && solar_radiation > 500, 1, null())")\n')))}u.isMDXComponent=!0}}]);