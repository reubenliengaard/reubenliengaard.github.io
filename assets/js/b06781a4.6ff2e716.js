"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[2763],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5513:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:3},i="Thermocouple",l={unversionedId:"automation-sensors/thermocouple",id:"automation-sensors/thermocouple",title:"Thermocouple",description:"Introduction",source:"@site/docs-automation/automation-sensors/thermocouple.md",sourceDirName:"automation-sensors",slug:"/automation-sensors/thermocouple",permalink:"/docs-automation/automation-sensors/thermocouple",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Carbon Dioxide",permalink:"/docs-automation/automation-sensors/carbon-dioxide"},next:{title:"Virtual Machines",permalink:"/docs-automation/category/virtual-machines"}},u={},c=[{value:"Introduction",id:"introduction",level:2},{value:"What?",id:"what",level:3},{value:"Why?",id:"why",level:3},{value:"Body",id:"body",level:2},{value:"How?",id:"how",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}],s={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"thermocouple"},"Thermocouple"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("h3",{id:"what"},"What?"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Thermocouples are very sensitive, requiring a good amplifier with a cold-compensation reference. The MAX31855K does everything for you, and can be easily interfaced with any microcontroller, even one without an analog input. This breakout board has the chip itself, a 3.3V regulator with 10uF bypass capacitors and level shifting circuitry, all assembled and tested. Comes with a 2 pin terminal block (for connecting to the thermocouple) and pin header (to plug into any breadboard or perfboard).")),(0,o.kt)("h3",{id:"why"},"Why?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"monitor pottery kiln temperature"),(0,o.kt)("li",{parentName:"ul"},"store data to understand effect firing temperature has on pots"),(0,o.kt)("li",{parentName:"ul"},"control temperature through switch solid state relay")),(0,o.kt)("h2",{id:"body"},"Body"),(0,o.kt)("h3",{id:"how"},"How?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_max31855\nfrom influxdb import InfluxDBClient\n\ndbClient = InfluxDBClient(\'192.168.88.48\', 8086, \'root\', \'root\', \'workshop\')\n\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\n\nmax31855 = adafruit_max31855.MAX31855(spi, cs)\n\nwhile True:\n    try:\n        tempC = max31855.temperature\n        tempF = tempC * 9 / 5 + 32\n        print("Temperature: {} C {} F ".format(tempC, tempF))\n        loginEvents = [{"measurement":"kiln",\n                    "fields": {\n                            "temp": tempC\n                            }\n                  }\n             ]\n        dbClient.write_points(loginEvents)\n        time.sleep(2.0)\n    except:\n        pass\n')),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.adafruit.com/product/269"},"Adafruit")))}p.isMDXComponent=!0}}]);