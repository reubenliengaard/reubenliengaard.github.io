"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[326],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(r),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return r?t.createElement(f,a(a({ref:n},c),{},{components:r})):t.createElement(f,a({ref:n},c))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var s=2;s<i;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1006:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var t=r(7462),o=(r(7294),r(3905));const i={sidebar_position:3},a="Thermocouple",p={unversionedId:"energy-and-environmental-monitoring./reading-sensors-with-python/thermocouple",id:"energy-and-environmental-monitoring./reading-sensors-with-python/thermocouple",title:"Thermocouple",description:"Hardware",source:"@site/docs/energy-and-environmental-monitoring./reading-sensors-with-python/thermocouple.md",sourceDirName:"energy-and-environmental-monitoring./reading-sensors-with-python",slug:"/energy-and-environmental-monitoring./reading-sensors-with-python/thermocouple",permalink:"/docs/energy-and-environmental-monitoring./reading-sensors-with-python/thermocouple",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Carbon Dioxide",permalink:"/docs/energy-and-environmental-monitoring./reading-sensors-with-python/carbon-dioxide"}},l={},s=[{value:"Hardware",id:"hardware",level:3},{value:"Script",id:"script",level:3},{value:"References",id:"references",level:2}],c={toc:s};function u(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"thermocouple"},"Thermocouple"),(0,o.kt)("h3",{id:"hardware"},"Hardware"),(0,o.kt)("h3",{id:"script"},"Script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_max31855\nfrom influxdb import InfluxDBClient\n\ndbClient = InfluxDBClient(\'192.168.88.48\', 8086, \'root\', \'root\', \'workshop\')\n\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\n\nmax31855 = adafruit_max31855.MAX31855(spi, cs)\n\nwhile True:\n    try:\n        tempC = max31855.temperature\n        tempF = tempC * 9 / 5 + 32\n        print("Temperature: {} C {} F ".format(tempC, tempF))\n        loginEvents = [{"measurement":"kiln",\n                    "fields": {\n                            "temp": tempC\n                            }\n                  }\n             ]\n        dbClient.write_points(loginEvents)\n        time.sleep(2.0)\n    except:\n        pass\n')),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.adafruit.com/product/269"},"Adafruit")))}u.isMDXComponent=!0}}]);