"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[3912],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>f});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var u=t.createContext({}),s=function(e){var n=t.useContext(u),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(a),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||r;return a?t.createElement(f,i(i({ref:n},c),{},{components:a})):t.createElement(f,i({ref:n},c))}));function f(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3305:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:2},i="Podman Automation Stack",l={unversionedId:"automation/podman-automation-stack",id:"automation/podman-automation-stack",title:"Podman Automation Stack",description:"Create a pod",source:"@site/docs/automation/podman-automation-stack.md",sourceDirName:"automation",slug:"/automation/podman-automation-stack",permalink:"/docs/automation/podman-automation-stack",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"KVM Wifi Controller",permalink:"/docs/automation/kvm-wifi-controller"},next:{title:"Read Sensors with Python",permalink:"/docs/category/read-sensors-with-python"}},u={},s=[{value:"Create a pod",id:"create-a-pod",level:3},{value:"Pull geoserver image",id:"pull-geoserver-image",level:3},{value:"Run image in pod",id:"run-image-in-pod",level:3},{value:"Pull postgis image",id:"pull-postgis-image",level:3},{value:"Run image in pod",id:"run-image-in-pod-1",level:3},{value:"Generate YAML file",id:"generate-yaml-file",level:3},{value:"Here&#39;s the YAML file",id:"heres-the-yaml-file",level:2},{value:"Test YAML file",id:"test-yaml-file",level:3},{value:"Reference",id:"reference",level:3}],c={toc:s};function d(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"podman-automation-stack"},"Podman Automation Stack"),(0,o.kt)("h3",{id:"create-a-pod"},"Create a pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod create -p 8086:8086  -p 3000:3000 -n automation\n")),(0,o.kt)("h3",{id:"pull-geoserver-image"},"Pull geoserver image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull grafana/grafana\n")),(0,o.kt)("h3",{id:"run-image-in-pod"},"Run image in pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name grafana \\\n--pod automation \\\ngrafana/grafana\n")),(0,o.kt)("h3",{id:"pull-postgis-image"},"Pull postgis image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull influxdb:latest\n")),(0,o.kt)("h3",{id:"run-image-in-pod-1"},"Run image in pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name influxdb \\\n--pod automation \\\ninfluxdb:latest\n")),(0,o.kt)("h3",{id:"generate-yaml-file"},"Generate YAML file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman generate kube automation -f automation-stack-podman.yaml\n")),(0,o.kt)("h2",{id:"heres-the-yaml-file"},"Here's the YAML file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# Save the output of this file and use kubectl create -f to import\n# it into Kubernetes.\n#\n# Created with podman-4.3.1\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    io.kubernetes.cri-o.ContainerType/grafana: container\n    io.kubernetes.cri-o.ContainerType/influxdb: container\n    io.kubernetes.cri-o.SandboxID/grafana: c5e2d37a92c924151f0a0f940087b6845b01f0be64fb3bdcffcc03ba867dba6\n    io.kubernetes.cri-o.SandboxID/influxdb: c5e2d37a92c924151f0a0f940087b6845b01f0be64fb3bdcffcc03ba867dba6\n    io.kubernetes.cri-o.TTY/grafana: "true"\n    io.kubernetes.cri-o.TTY/influxdb: "true"\n    io.podman.annotations.autoremove/grafana: "FALSE"\n    io.podman.annotations.autoremove/influxdb: "FALSE"\n    io.podman.annotations.init/grafana: "FALSE"\n    io.podman.annotations.init/influxdb: "FALSE"\n    io.podman.annotations.privileged/grafana: "FALSE"\n    io.podman.annotations.privileged/influxdb: "FALSE"\n    io.podman.annotations.publish-all/grafana: "FALSE"\n    io.podman.annotations.publish-all/influxdb: "FALSE"\n  creationTimestamp: "2022-12-30T19:10:13Z"\n  labels:\n    app: automation\n  name: automation\nspec:\n  automountServiceAccountToken: false\n  containers:\n  - image: docker.io/grafana/grafana:latest\n    name: grafana\n    ports:\n    - containerPort: 3000\n      hostPort: 3000\n    - containerPort: 8086\n      hostPort: 8086\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n  - args:\n    - influxd\n    env:\n    - name: INFLUX_CLI_VERSION\n      value: 2.6.0\n    - name: INFLUXDB_VERSION\n      value: 2.6.0\n    image: docker.io/library/influxdb:latest\n    name: influxdb\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n    volumeMounts:\n    - mountPath: /etc/influxdb2\n      name: ab808e2802d90f40b10635167d81e832444543b8fff5632777b17b693cd42935-pvc\n    - mountPath: /var/lib/influxdb2\n      name: d78125111df55a4b0dfd7ac3cf58fcc990988b20651ce6d07d9fe9b0ab3f53fd-pvc\n  enableServiceLinks: false\n  hostname: automation\n  restartPolicy: Never\n  volumes:\n  - name: ab808e2802d90f40b10635167d81e832444543b8fff5632777b17b693cd42935-pvc\n    persistentVolumeClaim:\n      claimName: ab808e2802d90f40b10635167d81e832444543b8fff5632777b17b693cd42935\n  - name: d78125111df55a4b0dfd7ac3cf58fcc990988b20651ce6d07d9fe9b0ab3f53fd-pvc\n    persistentVolumeClaim:\n      claimName: d78125111df55a4b0dfd7ac3cf58fcc990988b20651ce6d07d9fe9b0ab3f53fd\nstatus: {}\n')),(0,o.kt)("h3",{id:"test-yaml-file"},"Test YAML file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf postgis\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf geoserver\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod rm spatial\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman play kube automation-stack-podman.yaml\n")),(0,o.kt)("h3",{id:"reference"},"Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://oracle-base.com/articles/linux/podman-generate-and-play-kubernetes-yaml-files#:~:text=Podman%20can%20generate%20Kubernetes%20YAML,similar%20to%20Docker%20Compose%20files."},"Oracle-Base")))}d.isMDXComponent=!0}}]);