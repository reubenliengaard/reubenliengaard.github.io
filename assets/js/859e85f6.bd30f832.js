"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[8521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1},a="Provisioning Fedora CoreOS on the Raspberry Pi 4",l={unversionedId:"monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",id:"monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",title:"Provisioning Fedora CoreOS on the Raspberry Pi 4",description:"To do",source:"@site/docs/monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4.md",sourceDirName:"monitoring",slug:"/monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",permalink:"/docs/monitoring/provisioning-fedora-coreos-on-the-raspberry-pi 4",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Monitoring",permalink:"/docs/category/monitoring"},next:{title:"Installing Cisco Cloud Wireless Controller with KVM",permalink:"/docs/monitoring/installing-cisco-cloud-wireless-controller"}},s={},c=[{value:"To do",id:"to-do",level:2},{value:"Install stuff",id:"install-stuff",level:3},{value:"Make working directory and change to it",id:"make-working-directory-and-change-to-it",level:3},{value:"Download image",id:"download-image",level:3},{value:"Rename image to simpler name",id:"rename-image-to-simpler-name",level:3},{value:"Create rpict.bu",id:"create-rpictbu",level:3},{value:"Transpile butane file into an ignition file",id:"transpile-butane-file-into-an-ignition-file",level:3},{value:"Test",id:"test",level:3},{value:"Setup the correct SELinux label to allow access to the config",id:"setup-the-correct-selinux-label-to-allow-access-to-the-config",level:3},{value:"Start a Fedora CoreOS virtual machine",id:"start-a-fedora-coreos-virtual-machine",level:3},{value:"Destroy",id:"destroy",level:3},{value:"Write to disk",id:"write-to-disk",level:3},{value:"Reference",id:"reference",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"provisioning-fedora-coreos-on-the-raspberry-pi-4"},"Provisioning Fedora CoreOS on the Raspberry Pi 4"),(0,o.kt)("h2",{id:"to-do"},"To do"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"setup MQTT gateway"),(0,o.kt)("li",{parentName:"ul"},"write CoreOS to SD and boot pi with external monitor"),(0,o.kt)("li",{parentName:"ul"},"test whether /dev/ttyAMA0 is accesible with CoreOS on RPI4")),(0,o.kt)("h3",{id:"install-stuff"},"Install stuff"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf install -y rpi-imager coreos-installer butane ignition-validate\n")),(0,o.kt)("h3",{id:"make-working-directory-and-change-to-it"},"Make working directory and change to it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/coreos\ncd ~/coreos\n")),(0,o.kt)("h3",{id:"download-image"},"Download image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"coreos-installer download -p qemu -f qcow2.xz --decompress\n")),(0,o.kt)("h3",{id:"rename-image-to-simpler-name"},"Rename image to simpler name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mv *.qcow2 fedora-coreos.qcow2\n")),(0,o.kt)("h3",{id:"create-rpictbu"},"Create rpict.bu"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'variant: fcos\nversion: 1.4.0\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAA...\nsystemd:\n  units:\n    - name: serial-getty@ttyS0.service\n      dropins:\n      - name: autologin-core.conf\n        contents: |\n          [Service]\n          # Override Execstart in main unit\n          ExecStart=\n          # Add new Execstart with `-` prefix to ignore failure\n          ExecStart=-/usr/sbin/agetty --autologin core --noclear %I $TERM\n          TTYVTDisallocate=no\n    - name: failure.service\n      enabled: true\n      contents: |\n        [Service]\n        Type=oneshot\n        ExecStart=/usr/bin/false\n        RemainAfterExit=yes\n\n        [Install]\n        WantedBy=multi-user.target\n    - name: etcd-member.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Run a single node etcd\n        After=network-online.target\n        Wants=network-online.target\n\n        [Service]\n        ExecStartPre=mkdir -p /var/lib/rpict2mqtt\n        ExecStartPre=-/bin/podman kill rpict2mqtt\n        ExecStartPre=-/bin/podman rm rpict2mqtt\n        ExecStartPre=-/bin/podman pull docker.io/gtricot/rpict-mqtt:latest\n        ExecStart=/bin/podman run --name rpict2mqtt \\\n                           --device=/dev/ttyAMA0:/dev/ttyAMA0 \\\n                            -e MQTT_URL="mqtt://my_mqtt_broker:1883" \\\n                           -e MQTT_USER="my-super-user" \\\n                           -e MQTT_PASSWORD="my-secret-password" \\\n                           -e MQTT_BASE_TOPIC="custom-rpict-topic" \\\n                           -e ABSOLUTE_VALUES=true \\\n                           -e SENSOR_VALUE_THRESHOLD=2 \\\n                            gtricot/rpict-mqtt\n        ExecStop=/bin/podman stop rpict2mqtt\n\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /etc/hostname\n      mode: 0644\n      contents:\n        inline: |\n          tutorial\n    - path: /etc/profile.d/systemd-pager.sh\n      mode: 0644\n      contents:\n        inline: |\n          # Tell systemd to not use a pager when printing information\n          export SYSTEMD_PAGER=cat\n')),(0,o.kt)("h3",{id:"transpile-butane-file-into-an-ignition-file"},"Transpile butane file into an ignition file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"butane --pretty --strict rpict.bu --output rpict.ign\n")),(0,o.kt)("h3",{id:"test"},"Test"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ignition-validate rpict.ign && echo 'Success!'\n")),(0,o.kt)("h3",{id:"setup-the-correct-selinux-label-to-allow-access-to-the-config"},"Setup the correct SELinux label to allow access to the config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"chcon --verbose --type svirt_home_t rpict.ign\n")),(0,o.kt)("h3",{id:"start-a-fedora-coreos-virtual-machine"},"Start a Fedora CoreOS virtual machine"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'virt-install --name=fcos --vcpus=2 --ram=2048 --os-variant=fedora-coreos-stable \\\n    --import --network=bridge=virbr0 --graphics=none \\\n    --qemu-commandline="-fw_cfg name=opt/com.coreos/config,file=${PWD}/rpict.ign" \\\n    --disk=size=20,backing_store=${PWD}/fedora-coreos.qcow2\n')),(0,o.kt)("h3",{id:"destroy"},"Destroy"),(0,o.kt)("p",null,"CTRL + ] to exit kvm\nto destroy run\nvirsh destroy fcos\nvirsh undefine --remove-all-storage fcos"),(0,o.kt)("h3",{id:"write-to-disk"},"Write to disk"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"FCOSDISK=/dev/sdX\nsudo coreos-installer install --architecture=aarch64 -i config.ign \n")),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.fedoraproject.org/en-US/fedora-coreos/provisioning-raspberry-pi4/"},"FedoraOnRpi")))}d.isMDXComponent=!0}}]);