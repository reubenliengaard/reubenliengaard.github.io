"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[7135],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=d(a),u=n,m=g["".concat(s,".").concat(u)]||g[u]||c[u]||l;return a?r.createElement(m,i(i({ref:t},p),{},{components:a})):r.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[g]="string"==typeof e?e:n,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2884:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:5},i="Loading land registry lidar",o={unversionedId:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar",id:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar",title:"Loading land registry lidar",description:"Create table",source:"@site/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar.md",sourceDirName:"geospatial-analysis/upload-data-to-postgis-with-linux-shell",slug:"/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Loading Ordnance Survey MasterMap with astun loader",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-mastermap-with-astun-loader"},next:{title:"Ordnance survey satellite imagery with raster2pgsql",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery"}},s={},d=[{value:"Create table",id:"create-table",level:2},{value:"Load sattelite data with either raster2pgsql or ogr2ogr",id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr",level:3},{value:"raster2pgsql",id:"raster2pgsql",level:3},{value:"ogr2ogr",id:"ogr2ogr",level:3},{value:"Add a spatial index",id:"add-a-spatial-index",level:3},{value:"References",id:"references",level:2}],p={toc:d};function g(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"loading-land-registry-lidar"},"Loading land registry lidar"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"psql -h localhost -p 5432 -U postgres -P postgres -d public\n")),(0,n.kt)("h2",{id:"create-table"},"Create table"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE bristol-lidar-dtm (\n  rast raster\n);\n")),(0,n.kt)("h3",{id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr"},"Load sattelite data with either raster2pgsql or ogr2ogr"),(0,n.kt)("h3",{id:"raster2pgsql"},"raster2pgsql"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"raster2pgsql -s 27700 -I -C -M *.tif -F bristol-lidar-dtm | psql -h localhost -d public -U username -P postgres\n")),(0,n.kt)("h3",{id:"ogr2ogr"},"ogr2ogr"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'ogr2ogr -f "PostgreSQL" "PG:host=localhost user=postgres dbname=public password=postgres" *.tif -nln bristol-lidar-dtm --password=postgres\n')),(0,n.kt)("h3",{id:"add-a-spatial-index"},"Add a spatial index"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE INDEX bristol-lidar-dtm-gist ON bristol-lidar-dtm USING GIST (ST_ConvexHull(rast));\n")),(0,n.kt)("h2",{id:"references"},"References"))}g.isMDXComponent=!0}}]);