"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[1782],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(f,o(o({ref:n},u),{},{components:t})):a.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:2},o="Influxdb using podman play kube",l={unversionedId:"rpi4-sensors-into-influxdb-pod-with-python/influxdb-using-podman-play-kube",id:"rpi4-sensors-into-influxdb-pod-with-python/influxdb-using-podman-play-kube",title:"Influxdb using podman play kube",description:"First create a pod and inflluxdb container using podman, then generate a YAML file using podman play.",source:"@site/docs/rpi4-sensors-into-influxdb-pod-with-python/influxdb-using-podman-play-kube.md",sourceDirName:"rpi4-sensors-into-influxdb-pod-with-python",slug:"/rpi4-sensors-into-influxdb-pod-with-python/influxdb-using-podman-play-kube",permalink:"/docs/rpi4-sensors-into-influxdb-pod-with-python/influxdb-using-podman-play-kube",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cisco cloud wireless controller in a KVM environment",permalink:"/docs/rpi4-sensors-into-influxdb-pod-with-python/cisco-cloud-wireless-controller-in-a-kvm-environment"},next:{title:"Python for Sensors on RPI4",permalink:"/docs/category/python-for-sensors-on-rpi4"}},p={},s=[{value:"Create a pod",id:"create-a-pod",level:3},{value:"Pull postgis image",id:"pull-postgis-image",level:3},{value:"Run image in pod",id:"run-image-in-pod",level:3},{value:"Generate YAML file",id:"generate-yaml-file",level:3},{value:"Here&#39;s the YAML file",id:"heres-the-yaml-file",level:2},{value:"Test YAML file",id:"test-yaml-file",level:3},{value:"Reference",id:"reference",level:3}],u={toc:s};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"influxdb-using-podman-play-kube"},"Influxdb using podman play kube"),(0,r.kt)("p",null,"First create a pod and inflluxdb container using podman, then generate a YAML file using podman play."),(0,r.kt)("p",null,"The YAML file can be used to recreate the pod in podman, or in kubernetes."),(0,r.kt)("h3",{id:"create-a-pod"},"Create a pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod create -p 8086:8086 -n monitoring\n")),(0,r.kt)("h3",{id:"pull-postgis-image"},"Pull postgis image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull influxdb:latest\n")),(0,r.kt)("h3",{id:"run-image-in-pod"},"Run image in pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name influxdb \\\n--pod monitoring \\\ninfluxdb:latest\n")),(0,r.kt)("h3",{id:"generate-yaml-file"},"Generate YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman generate kube monitoring -f monitoring-stack.yaml\n")),(0,r.kt)("h2",{id:"heres-the-yaml-file"},"Here's the YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# Save the output of this file and use kubectl create -f to import\n# it into Kubernetes.\n#\n# Created with podman-4.3.1\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    io.kubernetes.cri-o.ContainerType/influxdb: container\n    io.kubernetes.cri-o.SandboxID/influxdb: 2d22998804363b3df085ac8fac27ed13c9b1914f8264e2c79f30ef05fc47cf2\n    io.kubernetes.cri-o.TTY/influxdb: "true"\n    io.podman.annotations.autoremove/influxdb: "FALSE"\n    io.podman.annotations.init/influxdb: "FALSE"\n    io.podman.annotations.privileged/influxdb: "FALSE"\n    io.podman.annotations.publish-all/influxdb: "FALSE"\n  creationTimestamp: "2022-12-30T19:42:08Z"\n  labels:\n    app: monitoring\n  name: monitoring\nspec:\n  automountServiceAccountToken: false\n  containers:\n  - args:\n    - influxd\n    image: docker.io/library/influxdb:latest\n    name: influxdb\n    ports:\n    - containerPort: 8086\n      hostPort: 8086\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n    volumeMounts:\n    - mountPath: /var/lib/influxdb2\n      name: 36831ad4fbc16de21fa23d0036a1c5e96457432aee4485e2d62a06b11617628c-pvc\n    - mountPath: /etc/influxdb2\n      name: 0ef8bec1d4f74ecc07366abfe90077413b6a6ca093c510443e350b4a8c118288-pvc\n  enableServiceLinks: false\n  hostname: monitoring\n  restartPolicy: Never\n  volumes:\n  - name: 36831ad4fbc16de21fa23d0036a1c5e96457432aee4485e2d62a06b11617628c-pvc\n    persistentVolumeClaim:\n      claimName: 36831ad4fbc16de21fa23d0036a1c5e96457432aee4485e2d62a06b11617628c\n  - name: 0ef8bec1d4f74ecc07366abfe90077413b6a6ca093c510443e350b4a8c118288-pvc\n    persistentVolumeClaim:\n      claimName: 0ef8bec1d4f74ecc07366abfe90077413b6a6ca093c510443e350b4a8c118288\nstatus: {}\n\n')),(0,r.kt)("h3",{id:"test-yaml-file"},"Test YAML file"),(0,r.kt)("p",null,"Delete container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf influxdb\n")),(0,r.kt)("p",null,"Delete pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod rm monitoring\n")),(0,r.kt)("p",null,"Re-build pod using podman play and YAML file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman play kube monitoring-stack.yaml\n")),(0,r.kt)("h3",{id:"reference"},"Reference"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://oracle-base.com/articles/linux/podman-generate-and-play-kubernetes-yaml-files#:~:text=Podman%20can%20generate%20Kubernetes%20YAML,similar%20to%20Docker%20Compose%20files."},"Oracle-Base")))}d.isMDXComponent=!0}}]);