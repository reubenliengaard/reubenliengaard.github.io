"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[1793],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var a=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,a,r=function(e,t){if(null==e)return{};var o,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)o=n[a],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)o=n[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var o=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(o),g=r,h=u["".concat(s,".").concat(g)]||u[g]||p[g]||n;return o?a.createElement(h,l(l({ref:t},c),{},{components:o})):a.createElement(h,l({ref:t},c))}));function h(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=o.length,l=new Array(n);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<n;d++)l[d]=o[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,o)}g.displayName="MDXCreateElement"},624:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>d});var a=o(7462),r=(o(7294),o(3905));const n={sidebar_position:1},l="Bristol City Council GeoJson",i={unversionedId:"geospatial/upload-data-to-postgis-with-linux-shell/data-bristol-city-council-geojson",id:"geospatial/upload-data-to-postgis-with-linux-shell/data-bristol-city-council-geojson",title:"Bristol City Council GeoJson",description:"Introduction",source:"@site/docs/geospatial/upload-data-to-postgis-with-linux-shell/data-bristol-city-council-geojson.md",sourceDirName:"geospatial/upload-data-to-postgis-with-linux-shell",slug:"/geospatial/upload-data-to-postgis-with-linux-shell/data-bristol-city-council-geojson",permalink:"/docs/geospatial/upload-data-to-postgis-with-linux-shell/data-bristol-city-council-geojson",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Upload Data t PostGIS with Linux Shell",permalink:"/docs/category/upload-data-t-postgis-with-linux-shell"},next:{title:"Land Registry Polygons",permalink:"/docs/geospatial/upload-data-to-postgis-with-linux-shell/data-lad-registry-polygons"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"What?",id:"what",level:2},{value:"Why?",id:"why",level:2},{value:"Body",id:"body",level:2},{value:"How?",id:"how",level:3},{value:"Download all spatial data in gejson format",id:"download-all-spatial-data-in-gejson-format",level:3},{value:"Create new schema for council data",id:"create-new-schema-for-council-data",level:3},{value:"Upload bristol council data to new schema in postgis database",id:"upload-bristol-council-data-to-new-schema-in-postgis-database",level:3},{value:"With ogr2ogr",id:"with-ogr2ogr",level:4},{value:"Upload data with ogr2ogr",id:"upload-data-with-ogr2ogr",level:3},{value:"Or ashtun loader?",id:"or-ashtun-loader",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}],c={toc:d};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bristol-city-council-geojson"},"Bristol City Council GeoJson"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("h2",{id:"what"},"What?"),(0,r.kt)("p",null,"Bristol City Council has quite allot of spatial data available at ?"),(0,r.kt)("h2",{id:"why"},"Why?"),(0,r.kt)("h2",{id:"body"},"Body"),(0,r.kt)("h3",{id:"how"},"How?"),(0,r.kt)("h3",{id:"download-all-spatial-data-in-gejson-format"},"Download all spatial data in gejson format"),(0,r.kt)("h3",{id:"create-new-schema-for-council-data"},"Create new schema for council data"),(0,r.kt)("h3",{id:"upload-bristol-council-data-to-new-schema-in-postgis-database"},"Upload bristol council data to new schema in postgis database"),(0,r.kt)("h4",{id:"with-ogr2ogr"},"With ogr2ogr"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ogr2ogr -f "PostgreSQL" PG:"dbname=your-database-name user=your-username password=mypassword" /path/to/jour/GeoJSon/file -nln table-name\n')),(0,r.kt)("h3",{id:"upload-data-with-ogr2ogr"},"Upload data with ogr2ogr"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ogr2ogr \\\n-f \"PostgreSQL\" \\\n-a_srs \"EPSG:27700\" \\\n-t_srs \"EPSG:4326\" \\\n-nln parcels \\\n-progress \\\nPG:\"dbname='gis' host='$ip' port='5432' user='$user'\npassword='$password'\" \\\nLand_Registry_Cadastral_Parcels.gml\n")),(0,r.kt)("h3",{id:"or-ashtun-loader"},"Or ashtun loader?"),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("h2",{id:"references"},"References"))}u.isMDXComponent=!0}}]);