"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[3508],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),d=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(a),g=n,y=u["".concat(o,".").concat(g)]||u[g]||c[g]||l;return a?r.createElement(y,s(s({ref:t},p),{},{components:a})):r.createElement(y,s({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var d=2;d<l;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},1470:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:5},s="Ordnance survey satellite imagery with raster2pgsql",i={unversionedId:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",id:"geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",title:"Ordnance survey satellite imagery with raster2pgsql",description:"Create table",source:"@site/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery.md",sourceDirName:"geospatial-analysis/upload-data-to-postgis-with-linux-shell",slug:"/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-ordnance-survey-satellite-imagery",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Loading land registry lidar",permalink:"/docs/geospatial-analysis/upload-data-to-postgis-with-linux-shell/loading-environment-agency-lidar"},next:{title:"PostGIS Data Management and Queries",permalink:"/docs/category/postgis-data-management-and-queries"}},o={},d=[{value:"Create table",id:"create-table",level:2},{value:"Load sattelite data with either raster2pgsql or ogr2ogr",id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr",level:3},{value:"raster2pgsql",id:"raster2pgsql",level:3},{value:"ogr2ogr",id:"ogr2ogr",level:3},{value:"Add a spatial index",id:"add-a-spatial-index",level:3},{value:"References",id:"references",level:2}],p={toc:d};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ordnance-survey-satellite-imagery-with-raster2pgsql"},"Ordnance survey satellite imagery with raster2pgsql"),(0,n.kt)("h2",{id:"create-table"},"Create table"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE raster_table (\n  rast raster\n);\n")),(0,n.kt)("h3",{id:"load-sattelite-data-with-either-raster2pgsql-or-ogr2ogr"},"Load sattelite data with either raster2pgsql or ogr2ogr"),(0,n.kt)("h3",{id:"raster2pgsql"},"raster2pgsql"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"raster2pgsql -s 4326 -I -C -M path/to/raster_data.tif -F -t 100x100 raster_table | psql -h localhost -d database_name -U username\n")),(0,n.kt)("h3",{id:"ogr2ogr"},"ogr2ogr"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'ogr2ogr -f "PostgreSQL" "PG:host=localhost user=username dbname=database_name password=password" path/to/raster_data.tif -nln raster_table\n')),(0,n.kt)("h3",{id:"add-a-spatial-index"},"Add a spatial index"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE INDEX raster_table_gist ON raster_table USING GIST (ST_ConvexHull(rast));\n")),(0,n.kt)("h2",{id:"references"},"References"))}u.isMDXComponent=!0}}]);