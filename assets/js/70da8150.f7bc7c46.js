"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[6226],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>m});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),g=o,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||r;return a?t.createElement(m,i(i({ref:n},c),{},{components:a})):t.createElement(m,i({ref:n},c))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},6743:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:1},i="PostGIS and Geoserver with podman play kube",s={unversionedId:"geospatial/postgis-and-geoserver-with-podman-play-kube",id:"geospatial/postgis-and-geoserver-with-podman-play-kube",title:"PostGIS and Geoserver with podman play kube",description:"Create a pod",source:"@site/docs/geospatial/postgis-and-geoserver-with-podman-play-kube.md",sourceDirName:"geospatial",slug:"/geospatial/postgis-and-geoserver-with-podman-play-kube",permalink:"/docs/geospatial/postgis-and-geoserver-with-podman-play-kube",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Geospatial",permalink:"/docs/category/geospatial"},next:{title:"Upload Data t PostGIS with Linux Shell",permalink:"/docs/category/upload-data-t-postgis-with-linux-shell"}},l={},p=[{value:"Create a pod",id:"create-a-pod",level:3},{value:"Pull geoserver image",id:"pull-geoserver-image",level:3},{value:"Run image in pod",id:"run-image-in-pod",level:3},{value:"Pull postgis image",id:"pull-postgis-image",level:3},{value:"Run image in pod",id:"run-image-in-pod-1",level:3},{value:"Generate YAML file",id:"generate-yaml-file",level:3},{value:"Here&#39;s the YAML file",id:"heres-the-yaml-file",level:2},{value:"Test YAML file",id:"test-yaml-file",level:3},{value:"Remove postgis container",id:"remove-postgis-container",level:4},{value:"Remove geoserver container",id:"remove-geoserver-container",level:4},{value:"Remove spatial pod",id:"remove-spatial-pod",level:4},{value:"Install everything again using the YAML file",id:"install-everything-again-using-the-yaml-file",level:4}],c={toc:p};function u(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"postgis-and-geoserver-with-podman-play-kube"},"PostGIS and Geoserver with podman play kube"),(0,o.kt)("h3",{id:"create-a-pod"},"Create a pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod create -p 8080:8080 -p 5432:5432 -n geospatial\n")),(0,o.kt)("h3",{id:"pull-geoserver-image"},"Pull geoserver image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull kartoza/geoserver\n")),(0,o.kt)("h3",{id:"run-image-in-pod"},"Run image in pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name geoserver \\\n--pod geospatial \\\n-e GEOSERVER_ADMIN_USER=postgres \\\n-e GEOSERVER_ADMIN_PASSWORD=postgres \\\nkartoza/geoserver \n")),(0,o.kt)("h3",{id:"pull-postgis-image"},"Pull postgis image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull kartoza/postgis\n")),(0,o.kt)("h3",{id:"run-image-in-pod-1"},"Run image in pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name postgis \\\n--pod geospatial \\\n-e POSTGRES_PASS=postgres \\\n-e POSTGRES_USER=postgres \\\nkartoza/postgis\n")),(0,o.kt)("h3",{id:"generate-yaml-file"},"Generate YAML file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman generate kube geospatial -f geospatial-stack-podman.yaml\n")),(0,o.kt)("h2",{id:"heres-the-yaml-file"},"Here's the YAML file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'\n# Save the output of this file and use kubectl create -f to import\n# it into Kubernetes.\n#\n# Created with podman-4.3.1\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    io.kubernetes.cri-o.ContainerType/geoserver: container\n    io.kubernetes.cri-o.ContainerType/postgis: container\n    io.kubernetes.cri-o.SandboxID/geoserver: 5579c50f78551192cbc7eafed6f04db71155c3690d677c9a5741b25fe54fc14\n    io.kubernetes.cri-o.SandboxID/postgis: 5579c50f78551192cbc7eafed6f04db71155c3690d677c9a5741b25fe54fc14\n    io.kubernetes.cri-o.TTY/geoserver: "true"\n    io.kubernetes.cri-o.TTY/postgis: "true"\n    io.podman.annotations.autoremove/geoserver: "FALSE"\n    io.podman.annotations.autoremove/postgis: "FALSE"\n    io.podman.annotations.init/geoserver: "FALSE"\n    io.podman.annotations.init/postgis: "FALSE"\n    io.podman.annotations.privileged/geoserver: "FALSE"\n    io.podman.annotations.privileged/postgis: "FALSE"\n    io.podman.annotations.publish-all/geoserver: "FALSE"\n    io.podman.annotations.publish-all/postgis: "FALSE"\n  creationTimestamp: "2022-12-30T13:47:48Z"\n  labels:\n    app: geospatial\n  name: geospatial\nspec:\n  automountServiceAccountToken: false\n  containers:\n  - env:\n    - name: GEOSERVER_ADMIN_USER\n      value: postgres\n    - name: GEOSERVER_ADMIN_PASSWORD\n      value: postgres\n    image: docker.io/kartoza/geoserver:latest\n    name: geoserver\n    ports:\n    - containerPort: 5432\n      hostPort: 5432\n    - containerPort: 8080\n      hostPort: 8080\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n  - env:\n    - name: POSTGRES_PASS\n      value: postgres\n    - name: POSTGRES_USER\n      value: postgres\n    image: docker.io/kartoza/postgis:latest\n    name: postgis\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n    volumeMounts:\n    - mountPath: /var/lib/postgresql\n      name: 3276e85c3fc649e1904e0161ff79599dcc3292e9121982d648c0f2c47585abaf-pvc\n  enableServiceLinks: false\n  hostname: geospatial\n  restartPolicy: Never\n  volumes:\n  - name: 3276e85c3fc649e1904e0161ff79599dcc3292e9121982d648c0f2c47585abaf-pvc\n    persistentVolumeClaim:\n      claimName: 3276e85c3fc649e1904e0161ff79599dcc3292e9121982d648c0f2c47585abaf\nstatus: {}\n')),(0,o.kt)("h3",{id:"test-yaml-file"},"Test YAML file"),(0,o.kt)("h4",{id:"remove-postgis-container"},"Remove postgis container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf postgis\n")),(0,o.kt)("h4",{id:"remove-geoserver-container"},"Remove geoserver container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf geoserver\n")),(0,o.kt)("h4",{id:"remove-spatial-pod"},"Remove spatial pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod rm spatial\n")),(0,o.kt)("h4",{id:"install-everything-again-using-the-yaml-file"},"Install everything again using the YAML file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"podman play kube geospatial-stack-podman.yaml\n")))}u.isMDXComponent=!0}}]);