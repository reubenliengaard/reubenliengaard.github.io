"use strict";(self.webpackChunkreubenliengaard_github_io=self.webpackChunkreubenliengaard_github_io||[]).push([[5395],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>m});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),p=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(l.Provider,{value:a},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=r,m=g["".concat(l,".").concat(d)]||g[d]||u[d]||o;return n?t.createElement(m,i(i({ref:a},c),{},{components:n})):t.createElement(m,i({ref:a},c))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[g]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5359:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var t=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="Setting up PostGIS Database Server",s={unversionedId:"geospatial-analysis/setting-up-a-postgis-database-server",id:"geospatial-analysis/setting-up-a-postgis-database-server",title:"Setting up PostGIS Database Server",description:"Create a pod",source:"@site/docs/geospatial-analysis/setting-up-a-postgis-database-server.md",sourceDirName:"geospatial-analysis",slug:"/geospatial-analysis/setting-up-a-postgis-database-server",permalink:"/docs/geospatial-analysis/setting-up-a-postgis-database-server",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Geospatial Analysis",permalink:"/docs/category/geospatial-analysis"},next:{title:"Uploading Data to PostGIS with Linux Shell",permalink:"/docs/category/uploading-data-to-postgis-with-linux-shell"}},l={},p=[{value:"Create a pod",id:"create-a-pod",level:3},{value:"Pull geoserver image",id:"pull-geoserver-image",level:3},{value:"Run image in pod",id:"run-image-in-pod",level:3},{value:"Pull postgis image",id:"pull-postgis-image",level:3},{value:"Run image in pod",id:"run-image-in-pod-1",level:3},{value:"Generate YAML file",id:"generate-yaml-file",level:3},{value:"Here&#39;s the YAML file",id:"heres-the-yaml-file",level:2},{value:"Test YAML file",id:"test-yaml-file",level:3},{value:"Remove postgis container",id:"remove-postgis-container",level:4},{value:"Remove geoserver container",id:"remove-geoserver-container",level:4},{value:"Remove spatial pod",id:"remove-spatial-pod",level:4},{value:"Install everything again using the YAML file",id:"install-everything-again-using-the-yaml-file",level:4}],c={toc:p};function g(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-postgis-database-server"},"Setting up PostGIS Database Server"),(0,r.kt)("h3",{id:"create-a-pod"},"Create a pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod create -p 8080:8080 -p 5432:5432 -n geospatial\n")),(0,r.kt)("h3",{id:"pull-geoserver-image"},"Pull geoserver image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull kartoza/geoserver\n")),(0,r.kt)("h3",{id:"run-image-in-pod"},"Run image in pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name geoserver \\\n--pod geospatial \\\n-e GEOSERVER_ADMIN_USER=postgres \\\n-e GEOSERVER_ADMIN_PASSWORD=postgres \\\nkartoza/geoserver \n")),(0,r.kt)("h3",{id:"pull-postgis-image"},"Pull postgis image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pull kartoza/postgis\n")),(0,r.kt)("h3",{id:"run-image-in-pod-1"},"Run image in pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman run -d -t \\\n--name postgis \\\n--pod geospatial \\\n-e POSTGRES_PASS=postgres \\\n-e POSTGRES_USER=postgres \\\nkartoza/postgis\n")),(0,r.kt)("h3",{id:"generate-yaml-file"},"Generate YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman generate kube geospatial -f geospatial-stack-podman.yaml\n")),(0,r.kt)("h2",{id:"heres-the-yaml-file"},"Here's the YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\n# Save the output of this file and use kubectl create -f to import\n# it into Kubernetes.\n#\n# Created with podman-4.3.1\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    io.kubernetes.cri-o.ContainerType/geoserver: container\n    io.kubernetes.cri-o.ContainerType/postgis: container\n    io.kubernetes.cri-o.SandboxID/geoserver: 5579c50f78551192cbc7eafed6f04db71155c3690d677c9a5741b25fe54fc14\n    io.kubernetes.cri-o.SandboxID/postgis: 5579c50f78551192cbc7eafed6f04db71155c3690d677c9a5741b25fe54fc14\n    io.kubernetes.cri-o.TTY/geoserver: "true"\n    io.kubernetes.cri-o.TTY/postgis: "true"\n    io.podman.annotations.autoremove/geoserver: "FALSE"\n    io.podman.annotations.autoremove/postgis: "FALSE"\n    io.podman.annotations.init/geoserver: "FALSE"\n    io.podman.annotations.init/postgis: "FALSE"\n    io.podman.annotations.privileged/geoserver: "FALSE"\n    io.podman.annotations.privileged/postgis: "FALSE"\n    io.podman.annotations.publish-all/geoserver: "FALSE"\n    io.podman.annotations.publish-all/postgis: "FALSE"\n  creationTimestamp: "2022-12-30T13:47:48Z"\n  labels:\n    app: geospatial\n  name: geospatial\nspec:\n  automountServiceAccountToken: false\n  containers:\n  - env:\n    - name: GEOSERVER_ADMIN_USER\n      value: postgres\n    - name: GEOSERVER_ADMIN_PASSWORD\n      value: postgres\n    image: docker.io/kartoza/geoserver:latest\n    name: geoserver\n    ports:\n    - containerPort: 5432\n      hostPort: 5432\n    - containerPort: 8080\n      hostPort: 8080\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n  - env:\n    - name: POSTGRES_PASS\n      value: postgres\n    - name: POSTGRES_USER\n      value: postgres\n    image: docker.io/kartoza/postgis:latest\n    name: postgis\n    resources: {}\n    securityContext:\n      capabilities:\n        drop:\n        - CAP_MKNOD\n        - CAP_NET_RAW\n        - CAP_AUDIT_WRITE\n    tty: true\n    volumeMounts:\n    - mountPath: /var/lib/postgresql\n      name: 3276e85c3fc649e1904e0161ff79599dcc3292e9121982d648c0f2c47585abaf-pvc\n  enableServiceLinks: false\n  hostname: geospatial\n  restartPolicy: Never\n  volumes:\n  - name: 3276e85c3fc649e1904e0161ff79599dcc3292e9121982d648c0f2c47585abaf-pvc\n    persistentVolumeClaim:\n      claimName: 3276e85c3fc649e1904e0161ff79599dcc3292e9121982d648c0f2c47585abaf\nstatus: {}\n')),(0,r.kt)("h3",{id:"test-yaml-file"},"Test YAML file"),(0,r.kt)("h4",{id:"remove-postgis-container"},"Remove postgis container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf postgis\n")),(0,r.kt)("h4",{id:"remove-geoserver-container"},"Remove geoserver container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman rm -vf geoserver\n")),(0,r.kt)("h4",{id:"remove-spatial-pod"},"Remove spatial pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman pod rm spatial\n")),(0,r.kt)("h4",{id:"install-everything-again-using-the-yaml-file"},"Install everything again using the YAML file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"podman play kube geospatial-stack-podman.yaml\n")))}g.isMDXComponent=!0}}]);